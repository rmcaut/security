# The following is an example of best practice to handle RDS password using Secrets MAnager in CloudFormation.
# On the CloudFormation template, create an AWS Secrets Manager secret resource for the database password. 
# Modify the application to retrieve the database password from Secrets Manager when it launches. 
# Use a dynamic reference for the secret resource to be placed as the value of the MasterUserPassword property
# of the AWS::RDS::DBInstance resource.

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for an RDS instance using AWS Secrets Manager for the master user password.

Parameters:
  DBInstanceIdentifier:
    Type: String
    Default: my-secure-db
    Description: Identifier for the RDS DB instance.
  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: Allocated storage for the DB instance (GB).
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: DB instance class.
  DBEngine:
    Type: String
    Default: postgres
    Description: Database engine (e.g., postgres, mysql, aurora).
  DBMasterUsername:
    Type: String
    Default: admin
    Description: Master username for the database.

Resources:
  # AWS Secrets Manager secret for the database password
  DatabaseMasterUserPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: RDS Master User Password managed by Secrets Manager.
      GenerateSecretString:
        ExcludeCharacters: '"@/\' ' # Excludes characters that might cause issues in connection strings
        PasswordLength: 16
        IncludeSpace: false
        RequireEachIncludedType: true
        # Secrets Manager will automatically add a 'password' field to this JSON template
        SecretStringTemplate: !Sub '{"username":"${DBMasterUsername}"}'

  # AWS RDS DBInstance resource
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      MasterUsername: !Ref DBMasterUsername
      # Dynamic reference to retrieve the password from Secrets Manager
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DatabaseMasterUserPasswordSecret}:SecretString}}'
      # IMPORTANT: Add other required properties like VPCSecurityGroups, DBSubnetGroupName, etc.
      # Example (uncomment and replace with your values):
      # VPCSecurityGroups:
      #   - sg-xxxxxxxxxxxxxxxxx
      # DBSubnetGroupName: my-db-subnet-group
      # PubliclyAccessible: false # Recommended for production
      # MultiAZ: true # Recommended for production

Outputs:
  SecretARN:
    Description: The ARN of the AWS Secrets Manager secret storing the database password.
    Value: !Ref DatabaseMasterUserPasswordSecret
  DatabaseEndpoint:
    Description: The endpoint address of the RDS DB instance.
    Value: !GetAtt MyDBInstance.Endpoint.Address
  DatabasePort:
    Description: The port of the RDS DB instance.
    Value: !GetAtt MyDBInstance.Endpoint.Port
